{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IPolygonZkEVMBridge",
						"name": "_polygonZkEVMBridge",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_counterpartContract",
						"type": "address"
					},
					{
						"internalType": "uint32",
						"name": "_counterpartNetwork",
						"type": "uint32"
					},
					{
						"internalType": "contract IERC20Wrapped",
						"name": "_token",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "destinationAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "BridgeTokens",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "destinationAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "ClaimTokens",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "destinationAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "forceUpdateGlobalExitRoot",
						"type": "bool"
					}
				],
				"name": "bridgeToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "counterpartContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "counterpartNetwork",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "originAddress",
						"type": "address"
					},
					{
						"internalType": "uint32",
						"name": "originNetwork",
						"type": "uint32"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "onMessageReceived",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "polygonZkEVMBridge",
				"outputs": [
					{
						"internalType": "contract IPolygonZkEVMBridge",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC20Wrapped",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"BridgeTokens(address,uint256)": {
					"details": "Emitted when bridge tokens to the counterpart network"
				},
				"ClaimTokens(address,uint256)": {
					"details": "Emitted when claim tokens from the counterpart network"
				}
			},
			"kind": "dev",
			"methods": {
				"bridgeToken(address,uint256,bool)": {
					"params": {
						"amount": "Token amount",
						"destinationAddress": "Address destination that will receive the tokens on the other network",
						"forceUpdateGlobalExitRoot": "Indicates if the global exit root is updated or not"
					}
				},
				"constructor": {
					"params": {
						"_counterpartContract": "Couterpart contract",
						"_counterpartNetwork": "Couterpart network",
						"_polygonZkEVMBridge": "Polygon zkevm bridge address",
						"_token": "Token address"
					}
				},
				"onMessageReceived(address,uint32,bytes)": {
					"params": {
						"data": "Abi encoded metadata",
						"originAddress": "Origin address that the message was sended",
						"originNetwork": "Origin network that the message was sended ( not usefull for this contract)"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"bridgeToken(address,uint256,bool)": {
					"notice": "Send a message to the bridge that contains the destination address and the token amount The parent contract should implement the receive token protocol and afterwards call this function"
				},
				"onMessageReceived(address,uint32,bytes)": {
					"notice": "Function triggered by the bridge once a message is received by the other network"
				}
			},
			"notice": "ERC20BridgeNonNativeChain is an example contract to use the message layer of the PolygonZkEVMBridge to bridge custom ERC20 This contract will be deployed on the non-native erc20 network (usually will be zk-EVM)",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"ERC20BridgeNonNativeChain.sol": "ERC20BridgeNonNativeChain"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"ERC20BridgeNonNativeChain.sol": {
			"keccak256": "0x76a96b3c5eed768d3d10efa5ce66c4a8d8b38772698cbf6ae327614b0bc2f730",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://6bcb845e19feb8b695bd2190b144f13d18c2f2b4c2e65340e6bad964107d4777",
				"dweb:/ipfs/QmS7tY41SCLDGUrtTMvrWZ6x6dFDfQTGVWeThsKuXn1iDK"
			]
		},
		"base/PolygonBridgeBase.sol": {
			"keccak256": "0x6a3fce5147c0f5b16477863c66c89086bc5f59e9a5b43005be4dfc2f3dcb5b4a",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://faa106435327209506f276b94463cc627c5ec80bc539f60c6a11c1188af340ac",
				"dweb:/ipfs/QmXV5Qbx2dAFaDL19Lz5oUQRPG388mfqSFR3XBGdWgmY56"
			]
		},
		"base/PolygonERC20BridgeBase.sol": {
			"keccak256": "0x3bcfa7687dff32c1efc67ad0acaa228b54eea5455161ae31f6ed60a1f4b8d765",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://2f48140851c16ba7c399835ea4222de10919265f5774461a42eceaa454b98faf",
				"dweb:/ipfs/QmbH1mLrjL8v7JtyXALKP4RjaSv4XXAATebwzsHtN79UVG"
			]
		},
		"interfaces/IERC20Wrapped.sol": {
			"keccak256": "0x5dcdce19d2177ae0ad31a3e634d86e6152de6120cc6f143e2bee3d8dc1c6b213",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://5f6c97b407c47b7d4358d659113f800c7ca3e75321f61494c027c848770b084b",
				"dweb:/ipfs/QmSuwYV8ARhpscrNCEQ74X4BYrkAuCZWirwZV4mf1MG4Np"
			]
		},
		"polygonZKEVMContracts/interfaces/IBasePolygonZkEVMGlobalExitRoot.sol": {
			"keccak256": "0x11812b6c81c5d9812bdf7061259a19f256787cac6e5e10d16e70e7dcfb3fb162",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://91723a9303c7f7540abab3dc7440ec6d492603b8aa026a8ab1acd35d96e83b38",
				"dweb:/ipfs/QmQq4Xr9zq2dprZpWBwbiDmPTa66bVxdjSWZn3FmYkneHm"
			]
		},
		"polygonZKEVMContracts/interfaces/IBridgeMessageReceiver.sol": {
			"keccak256": "0x0903661a6226549f4238d79d98615f7d2ec0a907869d6a44bff3cdef110e51e0",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://65ef0ed2c6dc6aa8450c580f7707cb2827881b5a206a77ef6f6310ed65633406",
				"dweb:/ipfs/QmSYZL3rqBKEdH1Kfv22dFonYVDKP29K1rbS4hfYj5TEsU"
			]
		},
		"polygonZKEVMContracts/interfaces/IPolygonZkEVMBridge.sol": {
			"keccak256": "0x999173f036bac0310b029b915afea1428b0f6bd4378a42d8f6388506b38a87ce",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://9c2aa4131d2b3d61a5dfc0310d2e45147cddb415a3f4bcad76d0c08fe9e1309c",
				"dweb:/ipfs/QmcnCSwtt73icEvg57KZfVZqeajRBNnGRb4rQM6EMJrkRZ"
			]
		}
	},
	"version": 1
}