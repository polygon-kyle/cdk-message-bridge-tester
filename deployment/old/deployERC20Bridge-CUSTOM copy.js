/* eslint-disable no-await-in-loop, no-use-before-define, no-lonely-if, import/no-dynamic-require, global-require */
/* eslint-disable no-console, no-inner-declarations, no-undef, import/no-unresolved, no-restricted-syntax */
const path = require('path');
const fs = require('fs');
require('dotenv').config({ path: path.resolve(__dirname, '../.env') });
const { ethers } = require('hardhat');
const { expect } = require('chai');


// import ABIs
var jsonFileNativeToken = "./abiNativeToken.json";
var parsedNativeToken = JSON.parse(fs.readFileSync(jsonFileNativeToken));
var abiNativeToken = parsedNativeToken.abi;
var bytecodeNativeToken = '61010060405234801562000011575f80fd5b506040516200144338038062001443833981810160405281019062000037919062000224565b8383838282828273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508063ffffffff1660c08163ffffffff16815250505050505050508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000293565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200012c8262000101565b9050919050565b5f6200013f8262000120565b9050919050565b620001518162000133565b81146200015c575f80fd5b50565b5f815190506200016f8162000146565b92915050565b620001808162000120565b81146200018b575f80fd5b50565b5f815190506200019e8162000175565b92915050565b5f63ffffffff82169050919050565b620001be81620001a4565b8114620001c9575f80fd5b50565b5f81519050620001dc81620001b3565b92915050565b5f620001ee8262000120565b9050919050565b6200020081620001e2565b81146200020b575f80fd5b50565b5f815190506200021e81620001f5565b92915050565b5f805f80608085870312156200023f576200023e620000fd565b5b5f6200024e878288016200015f565b945050602062000261878288016200018e565b93505060406200027487828801620001cc565b925050606062000287878288016200020e565b91505092959194509250565b60805160a05160c05160e051611144620002ff5f395f81816103c1015281816103eb01526105ee01525f81816102e00152818161039d015261047101525f818161026201528181610355015261049201525f81816101bd01528181610379015261043501526111445ff3fe608060405260043610610054575f3560e01c806303bdcfc9146100585780631806b5f21461008057806340cf5e811461009c5780635d43792c146100c6578063b0138132146100f0578063fc0c546a1461011a575b5f80fd5b348015610063575f80fd5b5061007e600480360381019061007991906109cc565b610144565b005b61009a60048036038101906100959190610b91565b6101bb565b005b3480156100a7575f80fd5b506100b0610353565b6040516100bd9190610c0c565b60405180910390f35b3480156100d1575f80fd5b506100da610377565b6040516100e79190610c80565b60405180910390f35b3480156100fb575f80fd5b5061010461039b565b6040516101119190610ca8565b60405180910390f35b348015610125575f80fd5b5061012e6103bf565b60405161013b9190610ce1565b60405180910390f35b61014d826103e3565b5f8383604051602001610161929190610d09565b604051602081830303815290604052905061017c8183610433565b7f84de4c8d75302469871d77e99e829ab3f981ef6b4f2ab221b8fe7816cec54e3584846040516101ad929190610d09565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610db0565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce90610e3e565b60405180910390fd5b8163ffffffff167f000000000000000000000000000000000000000000000000000000000000000063ffffffff1614610345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033c90610ecc565b60405180910390fd5b61034e81610503565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6104303330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610565909392919063ffffffff16565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663240ff3787f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084866040518563ffffffff1660e01b81526004016104d29493929190610f73565b5f604051808303815f87803b1580156104e9575f80fd5b505af11580156104fb573d5f803e3d5ffd5b505050505050565b5f8082806020019051810190610519919061100c565b9150915061052782826105e7565b7f4d7f917f6b905f28ba5297e6c224a6cfec20ac6a3698a55b412d30b95ad25d2f8282604051610558929190610d09565b60405180910390a1505050565b6105e1848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161059a9392919061104a565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610636565b50505050565b61063282827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166106cb9092919063ffffffff16565b5050565b5f610660828473ffffffffffffffffffffffffffffffffffffffff1661074a90919063ffffffff16565b90505f8151141580156106845750808060200190518101906106829190611093565b155b156106c657826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016106bd9190610c0c565b60405180910390fd5b505050565b610745838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016106fe929190610d09565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610636565b505050565b606061075783835f61075f565b905092915050565b6060814710156107a657306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161079d9190610c0c565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff1684866040516107ce91906110f8565b5f6040518083038185875af1925050503d805f8114610808576040519150601f19603f3d011682016040523d82523d5f602084013e61080d565b606091505b509150915061081d868383610828565b925050509392505050565b60608261083d57610838826108b5565b6108ad565b5f825114801561086357505f8473ffffffffffffffffffffffffffffffffffffffff163b145b156108a557836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161089c9190610c0c565b60405180910390fd5b8190506108ae565b5b9392505050565b5f815111156108c75780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6109338261090a565b9050919050565b61094381610929565b811461094d575f80fd5b50565b5f8135905061095e8161093a565b92915050565b5f819050919050565b61097681610964565b8114610980575f80fd5b50565b5f813590506109918161096d565b92915050565b5f8115159050919050565b6109ab81610997565b81146109b5575f80fd5b50565b5f813590506109c6816109a2565b92915050565b5f805f606084860312156109e3576109e2610902565b5b5f6109f086828701610950565b9350506020610a0186828701610983565b9250506040610a12868287016109b8565b9150509250925092565b5f63ffffffff82169050919050565b610a3481610a1c565b8114610a3e575f80fd5b50565b5f81359050610a4f81610a2b565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610aa382610a5d565b810181811067ffffffffffffffff82111715610ac257610ac1610a6d565b5b80604052505050565b5f610ad46108f9565b9050610ae08282610a9a565b919050565b5f67ffffffffffffffff821115610aff57610afe610a6d565b5b610b0882610a5d565b9050602081019050919050565b828183375f83830152505050565b5f610b35610b3084610ae5565b610acb565b905082815260208101848484011115610b5157610b50610a59565b5b610b5c848285610b15565b509392505050565b5f82601f830112610b7857610b77610a55565b5b8135610b88848260208601610b23565b91505092915050565b5f805f60608486031215610ba857610ba7610902565b5b5f610bb586828701610950565b9350506020610bc686828701610a41565b925050604084013567ffffffffffffffff811115610be757610be6610906565b5b610bf386828701610b64565b9150509250925092565b610c0681610929565b82525050565b5f602082019050610c1f5f830184610bfd565b92915050565b5f819050919050565b5f610c48610c43610c3e8461090a565b610c25565b61090a565b9050919050565b5f610c5982610c2e565b9050919050565b5f610c6a82610c4f565b9050919050565b610c7a81610c60565b82525050565b5f602082019050610c935f830184610c71565b92915050565b610ca281610a1c565b82525050565b5f602082019050610cbb5f830184610c99565b92915050565b5f610ccb82610c4f565b9050919050565b610cdb81610cc1565b82525050565b5f602082019050610cf45f830184610cd2565b92915050565b610d0381610964565b82525050565b5f604082019050610d1c5f830185610bfd565b610d296020830184610cfa565b9392505050565b5f82825260208201905092915050565b7f546f6b656e577261707065643a3a506f6c79676f6e427269646765426173653a5f8201527f204e6f7420506f6c79676f6e5a6b45564d427269646765000000000000000000602082015250565b5f610d9a603783610d30565b9150610da582610d40565b604082019050919050565b5f6020820190508181035f830152610dc781610d8e565b9050919050565b7f546f6b656e577261707065643a3a506f6c79676f6e427269646765426173653a5f8201527f204e6f7420636f756e7465727061727420636f6e747261637400000000000000602082015250565b5f610e28603983610d30565b9150610e3382610dce565b604082019050919050565b5f6020820190508181035f830152610e5581610e1c565b9050919050565b7f546f6b656e577261707065643a3a506f6c79676f6e427269646765426173653a5f8201527f204e6f7420636f756e74657270617274206e6574776f726b0000000000000000602082015250565b5f610eb6603883610d30565b9150610ec182610e5c565b604082019050919050565b5f6020820190508181035f830152610ee381610eaa565b9050919050565b610ef381610997565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610f30578082015181840152602081019050610f15565b5f8484015250505050565b5f610f4582610ef9565b610f4f8185610f03565b9350610f5f818560208601610f13565b610f6881610a5d565b840191505092915050565b5f608082019050610f865f830187610c99565b610f936020830186610bfd565b610fa06040830185610eea565b8181036060830152610fb28184610f3b565b905095945050505050565b5f610fc78261090a565b9050919050565b610fd781610fbd565b8114610fe1575f80fd5b50565b5f81519050610ff281610fce565b92915050565b5f815190506110068161096d565b92915050565b5f806040838503121561102257611021610902565b5b5f61102f85828601610fe4565b925050602061104085828601610ff8565b9150509250929050565b5f60608201905061105d5f830186610bfd565b61106a6020830185610bfd565b6110776040830184610cfa565b949350505050565b5f8151905061108d816109a2565b92915050565b5f602082840312156110a8576110a7610902565b5b5f6110b58482850161107f565b91505092915050565b5f81905092915050565b5f6110d282610ef9565b6110dc81856110be565b93506110ec818560208601610f13565b80840191505092915050565b5f61110382846110c8565b91508190509291505056fea264697066735822122073d3917d6c24a69e8dd1737a03b12a2e8ff3b88f3c7d4df031fb1bf55606bbc664736f6c63430008140033';


var jsonFileNonNativeToken = "./abiNonNativeToken.json";
var parsedNonNativeToken = JSON.parse(fs.readFileSync(jsonFileNonNativeToken));
var abiNonNativeToken = parsedNonNativeToken.abi;
var bytecodeNonNativeToken = '61010060405234801562000011575f80fd5b50604051620010b2380380620010b2833981810160405281019062000037919062000224565b8383838282828273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508063ffffffff1660c08163ffffffff16815250505050505050508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250505050505062000293565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200012c8262000101565b9050919050565b5f6200013f8262000120565b9050919050565b620001518162000133565b81146200015c575f80fd5b50565b5f815190506200016f8162000146565b92915050565b620001808162000120565b81146200018b575f80fd5b50565b5f815190506200019e8162000175565b92915050565b5f63ffffffff82169050919050565b620001be81620001a4565b8114620001c9575f80fd5b50565b5f81519050620001dc81620001b3565b92915050565b5f620001ee8262000120565b9050919050565b6200020081620001e2565b81146200020b575f80fd5b50565b5f815190506200021e81620001f5565b92915050565b5f805f80608085870312156200023f576200023e620000fd565b5b5f6200024e878288016200015f565b945050602062000261878288016200018e565b93505060406200027487828801620001cc565b925050606062000287878288016200020e565b91505092959194509250565b60805160a05160c05160e051610db3620002ff5f395f81816103c1015281816103e501526105a201525f81816102e00152818161039d01526104ac01525f81816102620152818161035501526104cd01525f81816101bd0152818161037901526104700152610db35ff3fe608060405260043610610054575f3560e01c806303bdcfc9146100585780631806b5f21461008057806340cf5e811461009c5780635d43792c146100c6578063b0138132146100f0578063fc0c546a1461011a575b5f80fd5b348015610063575f80fd5b5061007e600480360381019061007991906106ff565b610144565b005b61009a600480360381019061009591906108c4565b6101bb565b005b3480156100a7575f80fd5b506100b0610353565b6040516100bd919061093f565b60405180910390f35b3480156100d1575f80fd5b506100da610377565b6040516100e791906109b3565b60405180910390f35b3480156100fb575f80fd5b5061010461039b565b60405161011191906109db565b60405180910390f35b348015610125575f80fd5b5061012e6103bf565b60405161013b9190610a14565b60405180910390f35b61014d826103e3565b5f8383604051602001610161929190610a3c565b604051602081830303815290604052905061017c818361046e565b7f84de4c8d75302469871d77e99e829ab3f981ef6b4f2ab221b8fe7816cec54e3584846040516101ad929190610a3c565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610249576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024090610ae3565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce90610b71565b60405180910390fd5b8163ffffffff167f000000000000000000000000000000000000000000000000000000000000000063ffffffff1614610345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033c90610bff565b60405180910390fd5b61034e8161053e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166374f4f54733836040518363ffffffff1660e01b815260040161043e929190610a3c565b5f604051808303815f87803b158015610455575f80fd5b505af1158015610467573d5f803e3d5ffd5b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663240ff3787f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084866040518563ffffffff1660e01b815260040161050d9493929190610ca6565b5f604051808303815f87803b158015610524575f80fd5b505af1158015610536573d5f803e3d5ffd5b505050505050565b5f80828060200190518101906105549190610d3f565b9150915061056282826105a0565b7f4d7f917f6b905f28ba5297e6c224a6cfec20ac6a3698a55b412d30b95ad25d2f8282604051610593929190610a3c565b60405180910390a1505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638c2a993e83836040518363ffffffff1660e01b81526004016105fb929190610a3c565b5f604051808303815f87803b158015610612575f80fd5b505af1158015610624573d5f803e3d5ffd5b505050505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106668261063d565b9050919050565b6106768161065c565b8114610680575f80fd5b50565b5f813590506106918161066d565b92915050565b5f819050919050565b6106a981610697565b81146106b3575f80fd5b50565b5f813590506106c4816106a0565b92915050565b5f8115159050919050565b6106de816106ca565b81146106e8575f80fd5b50565b5f813590506106f9816106d5565b92915050565b5f805f6060848603121561071657610715610635565b5b5f61072386828701610683565b9350506020610734868287016106b6565b9250506040610745868287016106eb565b9150509250925092565b5f63ffffffff82169050919050565b6107678161074f565b8114610771575f80fd5b50565b5f813590506107828161075e565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6107d682610790565b810181811067ffffffffffffffff821117156107f5576107f46107a0565b5b80604052505050565b5f61080761062c565b905061081382826107cd565b919050565b5f67ffffffffffffffff821115610832576108316107a0565b5b61083b82610790565b9050602081019050919050565b828183375f83830152505050565b5f61086861086384610818565b6107fe565b9050828152602081018484840111156108845761088361078c565b5b61088f848285610848565b509392505050565b5f82601f8301126108ab576108aa610788565b5b81356108bb848260208601610856565b91505092915050565b5f805f606084860312156108db576108da610635565b5b5f6108e886828701610683565b93505060206108f986828701610774565b925050604084013567ffffffffffffffff81111561091a57610919610639565b5b61092686828701610897565b9150509250925092565b6109398161065c565b82525050565b5f6020820190506109525f830184610930565b92915050565b5f819050919050565b5f61097b6109766109718461063d565b610958565b61063d565b9050919050565b5f61098c82610961565b9050919050565b5f61099d82610982565b9050919050565b6109ad81610993565b82525050565b5f6020820190506109c65f8301846109a4565b92915050565b6109d58161074f565b82525050565b5f6020820190506109ee5f8301846109cc565b92915050565b5f6109fe82610982565b9050919050565b610a0e816109f4565b82525050565b5f602082019050610a275f830184610a05565b92915050565b610a3681610697565b82525050565b5f604082019050610a4f5f830185610930565b610a5c6020830184610a2d565b9392505050565b5f82825260208201905092915050565b7f546f6b656e577261707065643a3a506f6c79676f6e427269646765426173653a5f8201527f204e6f7420506f6c79676f6e5a6b45564d427269646765000000000000000000602082015250565b5f610acd603783610a63565b9150610ad882610a73565b604082019050919050565b5f6020820190508181035f830152610afa81610ac1565b9050919050565b7f546f6b656e577261707065643a3a506f6c79676f6e427269646765426173653a5f8201527f204e6f7420636f756e7465727061727420636f6e747261637400000000000000602082015250565b5f610b5b603983610a63565b9150610b6682610b01565b604082019050919050565b5f6020820190508181035f830152610b8881610b4f565b9050919050565b7f546f6b656e577261707065643a3a506f6c79676f6e427269646765426173653a5f8201527f204e6f7420636f756e74657270617274206e6574776f726b0000000000000000602082015250565b5f610be9603883610a63565b9150610bf482610b8f565b604082019050919050565b5f6020820190508181035f830152610c1681610bdd565b9050919050565b610c26816106ca565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610c63578082015181840152602081019050610c48565b5f8484015250505050565b5f610c7882610c2c565b610c828185610c36565b9350610c92818560208601610c46565b610c9b81610790565b840191505092915050565b5f608082019050610cb95f8301876109cc565b610cc66020830186610930565b610cd36040830185610c1d565b8181036060830152610ce58184610c6e565b905095945050505050565b5f610cfa8261063d565b9050919050565b610d0a81610cf0565b8114610d14575f80fd5b50565b5f81519050610d2581610d01565b92915050565b5f81519050610d39816106a0565b92915050565b5f8060408385031215610d5557610d54610635565b5b5f610d6285828601610d17565b9250506020610d7385828601610d2b565b915050925092905056fea26469706673582212204edda6bf0cefd37a709d8cf1508cb90eb7c25335a14dde4e5484874641bdae3664736f6c63430008140033';


// Remainder of code
const mainnetBridgeAddress = '0x7Acb7591AFc9fC5CfF3F4671F028e937d30687C0';
const testnetBridgeAddress = '0x7Acb7591AFc9fC5CfF3F4671F028e937d30687C0';

const networkIDMainnet = 0;
const networkIDzkEVM = 1;

async function main() {
    let zkEVMProvider;
    let zkEVMBridgeContractAddress;

    const networkName = 'cdk_rootchain';


    // Network name
    if (networkName === 'cdk_rootchain') {
        // Use cdk_rootchain address
        zkEVMBridgeContractAddress = testnetBridgeAddress;
        zkEVMProvider = new ethers.providers.JsonRpcProvider('https://rpc-kylecdk.zkevmdev.net');
    } else {
        throw new Error('Network not supported');
    }


    // Load deployer
    let deployer; let deployerZkEVM;
    if (process.env.PVTKEY) {
        deployer = new ethers.Wallet(process.env.PVTKEY, ethers.provider);
        deployerZkEVM = new ethers.Wallet(process.env.PVTKEY, zkEVMProvider);
        console.log('Using pvtKey deployer with address: ', deployer.address);
    }


    /*
     * We need to predict the rest of address in order to make the deployments
     * in production this could be done either using create2 patterns or with an initialize function
     */

    // Predict zkEVM address
    const nonceZkevm = Number(await deployerZkEVM.getTransactionCount());

    const predictERC20BridgeZkEVM = ethers.utils.getContractAddress({ from: deployer.address, nonce: nonceZkevm });
    console.log('predictERC20BridgeZkEVM =' + predictERC20BridgeZkEVM);


    const predictErc20zkEVMToken = ethers.utils.getContractAddress({ from: deployer.address, nonce: nonceZkevm + 1 });
    console.log('predictErc20zkEVMToken =' + predictErc20zkEVMToken);


    // deploy mainnet erc20 bridge

    const ERC20BridgeMainnetFactory = await ethers.getContractFactory(abiNativeToken, bytecodeNativeToken, deployer);
    const ERC20BridgeMainnet = await ERC20BridgeMainnetFactory.deploy(
        zkEVMBridgeContractAddress,
        predictERC20BridgeZkEVM,
        1,
        '0xea03E6ECC76E3b2E9e5cdF6430935743CaC98CaB',
    );
    await ERC20BridgeMainnet.deployed();
    console.log('ERC20BridgeMainnet deployed');


    // deploy zkEVM erc20 bridge
    const ERC20BridgezkEVMFactory = await ethers.getContractFactory(abiNonNativeToken, bytecodeNonNativeToken, deployerZkEVM);
    const ERC20BridgezkEVM = await ERC20BridgezkEVMFactory.deploy(
        zkEVMBridgeContractAddress,
        ERC20BridgeMainnet.address,
        0,
        '0xec7214a3c4B71C21a3fC8B03C4E5caDE8E564C56',
    );
    await ERC20BridgezkEVM.deployed();
    console.log('ERC20BridgezkEVM deployed');


    expect(predictERC20BridgeZkEVM).to.be.equal(ERC20BridgezkEVM.address);
    expect(predictErc20zkEVMToken).to.be.equal(erc20zkEVMToken.address);

}

main();


    // ~~~~~~~~~~~~~ DONE ~~~~~~~~~~~~~
    // // Token params
    // const name = 'kyleCDK20token';
    // const symbol = 'K20';
    // const initialAccount = deployer.address;
    // const initialBalance = ethers.utils.parseEther('1000000000');
    // const defaultAdmin = '0x125FB391bA829e0865963D3B91711610049a9e78';
    // const pauser = '0x125FB391bA829e0865963D3B91711610049a9e78';
    // const minter = '0x125FB391bA829e0865963D3B91711610049a9e78';



    // ~~~~~~~~~~~~~ DONE ~~~~~~~~~~~~~
    // // deploy mainnet token
    // const erc20MainnetTokenFactory = await ethers.getContractFactory('kyleCDK20token', deployer);
    // const erc20MainnetToken = await erc20MainnetTokenFactory.deploy(
    //     name,
    //     symbol,
    //     initialAccount,
    //     initialBalance,
    //     defaultAdmin,
    //     pauser,
    //     minter
    // );
    // await erc20MainnetToken.deployed();
    // console.log('erc20MainnetToken deployed');



    // ~~~~~~~~~~~~~ DONE ~~~~~~~~~~~~~
    // // deploy zkEVM token
    // const erc20zkEVMTokenFactory = await ethers.getContractFactory('kyleCDK20token', deployerZkEVM);
    // const erc20zkEVMToken = await erc20zkEVMTokenFactory.deploy(
    //     name,
    //     symbol,
    //     initialAccount,
    //     initialBalance,
    //     defaultAdmin,
    //     pauser,
    //     minter,
    //     predictERC20BridgeZkEVM,
    // );
    // await erc20zkEVMToken.deployed();
    // console.log('erc20zkEVMToken deployed');



    // ~~~~~~~~~~~~~ NOT NEEDED ~~~~~~~~~~~~~
    // const outputJson = {
    //     ERC20BridgeMainnet: ERC20BridgeMainnet.address,
    //     ERC20BridgezkEVM: ERC20BridgezkEVM.address,
    //     erc20MainnetToken: erc20MainnetToken.address,
    //     erc20zkEVMToken: erc20zkEVMToken.address,
    //     deployerAddress: deployer.address,
    //     tokenName: name,
    //     tokenSymbol: symbol,
    //     tokenInitialBalance: initialBalance.toString(),
    // };
//     const pathOutputJson = path.join(__dirname, './ERC20Bridge_output.json');

//     fs.writeFileSync(pathOutputJson, JSON.stringify(outputJson, null, 1));
// }

// main().catch((e) => {
//     console.error(e);
//     process.exit(1);
// });


